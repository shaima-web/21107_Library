/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library.view;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.table.DefaultTableModel;
import library.dao.BookDao;
import library.dao.CategoryDao;
import library.dao.OperationsDao;
import library.dao.ClientDao;
import library.dao.Pdfexport;
import library.dao.Export;
import library.model.Operations;

/**
 *
 * @author User
 */
public class ReportView extends javax.swing.JInternalFrame {
    String paneres = null;
    /**
     * Creates new form ReportView
     */
    public ReportView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        checkout = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<String>();
        search = new javax.swing.JButton();
        checkin = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        date1 = new com.toedter.calendar.JDateChooser();
        date2 = new com.toedter.calendar.JDateChooser();
        text = new javax.swing.JTextField();
        cmb = new javax.swing.JComboBox<String>();
        jLabel5 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        buttonGroup1.add(checkout);
        checkout.setText("Check Out");
        checkout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutActionPerformed(evt);
            }
        });

        jLabel7.setText("Operation Category");

        jLabel1.setText("Search by");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CLIENT ID", "CLIENT NAME", "BOOK TITLE", "BOOK CATEGORY", "DATE" }));
        jComboBox1.setBorder(null);
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        search.setText("Search");
        search.setAlignmentY(0.0F);
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        buttonGroup1.add(checkin);
        checkin.setText("Check In");
        checkin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkinActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        jButton2.setText("Print");

        jButton3.setText("Export PDF");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Export Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Close");

        jLabel5.setText("To");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(checkin, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkout, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                .addGap(306, 306, 306))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(cmb, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(date1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(date2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(192, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(checkin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(search)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5))))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutActionPerformed
        paneres=pane();
    }//GEN-LAST:event_checkoutActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        if(jComboBox1.getSelectedItem().toString().equals("Book Category")){
            addData();
            cmb.setEnabled(true);
            text.setEnabled(false);
            date1.setEnabled(false);
            date2.setEnabled(false);
        }
        else if(jComboBox1.getSelectedItem().toString().equals("Client Id"))
        {
            text.setEnabled(true);
            cmb.setEnabled(false);
            date1.setEnabled(false);
            date2.setEnabled(false);
        }
        else if(jComboBox1.getSelectedItem().toString().equals("Client Name"))
        {
            text.setEnabled(true);
            cmb.setEnabled(false);
            date1.setEnabled(false);
            date2.setEnabled(false);
        }
        else if(jComboBox1.getSelectedItem().toString().equals("Book Id"))
        {
            text.setEnabled(true);
            cmb.setEnabled(false);
            date1.setEnabled(false);
            date2.setEnabled(false);
        }
        else if(jComboBox1.getSelectedItem().toString().equals("Book Title"))
        {
            text.setEnabled(true);
            cmb.setEnabled(false);
            date1.setEnabled(false);
            date2.setEnabled(false);
        }
        else if(jComboBox1.getSelectedItem().toString().equals("Date"))
        {
            date1.setEnabled(true);
            date2.setEnabled(true);
            cmb.setEditable(false);
            text.setEditable(false);
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        if(checkin.isSelected() || checkout.isSelected()){
            if(jComboBox1.getSelectedItem().toString().equals("Book Category")){
                if(cmb.getSelectedItem()!=null)
                reportByCategory(cmb.getSelectedItem().toString());
            }
            else if(jComboBox1.getSelectedItem().toString().equals("Client Id"))
            {
                if(text.getText()!=null)
                reportByClientId(text.getText());
            }
            else if(jComboBox1.getSelectedItem().toString().equals("Client Name"))
            {
                if(text.getText()!=null)
                reportByClientName(text.getText());
            }
            else if(jComboBox1.getSelectedItem().toString().equals("Book Title"))
        {
            if(text.getText()!=null)
                reportByBookTitle(text.getText());
        }
            else if(jComboBox1.getSelectedItem().toString().equals("Date"))
            {
                if(date1.getDate()!=null || date2.getDate()!=null)
                reportByDate(new Date(date1.getDate().getTime()),new Date(date2.getDate().getTime()));
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Please select Operation !!");
        }
    }//GEN-LAST:event_searchActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Pdfexport pdf = new Pdfexport();
        pdf.exportPdfData(table);
        JOptionPane.showMessageDialog(this, "Data exported to PDF Successfully.");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Export m = new Export();
        m.export(table,"operation");
        JOptionPane.showMessageDialog(this, "Data exported to Excel Successfully.");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void checkinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkinActionPerformed
        paneres=null;
    }//GEN-LAST:event_checkinActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton checkin;
    private javax.swing.JRadioButton checkout;
    private javax.swing.JComboBox<String> cmb;
    private com.toedter.calendar.JDateChooser date1;
    private com.toedter.calendar.JDateChooser date2;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton search;
    private javax.swing.JTable table;
    private javax.swing.JTextField text;
    // End of variables declaration//GEN-END:variables

        public void reportByCategory(String category){
        ClientDao cdao = new ClientDao();
        BookDao bdao = new BookDao();
        Object[] colnames = {"Operation No","Client Name","Book Name","Borrowed/Return date","Operation category","Status"};
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        tm.setRowCount(0);
        tm.setColumnIdentifiers(colnames);
        OperationsDao ckdao =  new OperationsDao();
        List<Object[]> operations = ckdao.getReportOfDataCategory(cmb.getSelectedItem().toString(), checkin.isSelected()?"CHECK IN":"CHECK OUT");
        for(Object[] c:operations){
            String[] dat = {c[0].toString(),cdao.getClientName(c[1].toString()).toString(),bdao.getBookName(c[2].toString()),new SimpleDateFormat("dd-MM-yyyy").format((Date) c[3]),c[4].toString(),c[5].toString()};
            
            if("All".equals(paneres) || paneres==null){
                tm.addRow(dat);
            }
            else if(paneres.equals(c[5].toString())){
                tm.addRow(dat);
            }
            
            
        }
        table.setModel(tm);
    }
    
     public void reportByClientName(String cname){
         OperationsDao ckdao =  new OperationsDao();
         ClientDao cdao = new ClientDao();
         BookDao bdao = new BookDao();
        List<Operations> operations = ckdao.getReportOfData("client",cdao.getRegId(text.getText()), checkin.isSelected()?"CHECK IN":"CHECK OUT");
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        tm.setRowCount(0);
        Object[] colnames = {"Operation No","Client Name","Book Name","Borrowed/Return date","Operation category","Status"};
        tm.setColumnIdentifiers(colnames);
        for(Operations c:operations){
            String obj[] ={c.getOpId(),cdao.getClientName(c.getClient().getRegid()).toString(),bdao.getBookName(c.getBook().getBookid()),new SimpleDateFormat("dd-MM-yyyy").format(c.getDatetime()),c.getOperationCategory(),c.getStatus()};  
            if("All".equals(paneres) || paneres==null){
                tm.addRow(obj);
            }
            else if(paneres.equals(c.getStatus())){
                tm.addRow(obj);
            }  
        }
        table.setModel(tm);
    }
    public void reportByClientId(String cid){
        OperationsDao ckdao =  new OperationsDao();
        ClientDao cdao = new ClientDao();
        BookDao bdao = new BookDao();
        List<Operations> operations = ckdao.getReportOfData("client",text.getText(), checkin.isSelected()?"CHECK IN":"CHECK OUT");
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        tm.setRowCount(0);
        Object[] colnames = {"Operation No","Client Name","Book Name","Borrowed/Return date","Operation category","Status"};
        tm.setColumnIdentifiers(colnames);
        for(Operations c:operations){
            String obj[] ={c.getOpId(),cdao.getClientName(c.getClient().getRegid()).toString(),bdao.getBookName(c.getBook().getBookid()),new SimpleDateFormat("dd-MM-yyyy").format(c.getDatetime()),c.getOperationCategory(),c.getStatus()};  
            if("All".equals(paneres) || paneres==null){
                tm.addRow(obj);
            }
            else if(paneres.equals(c.getStatus())){
                tm.addRow(obj);
            }
        }
        table.setModel(tm);
    }
    public void reportByBookTitle(String title){
        OperationsDao ckdao =  new OperationsDao();
        ClientDao cdao = new ClientDao();
        BookDao bdao = new BookDao();
        List<Operations> operations = ckdao.getReportOfData("book",ckdao.getId("Book", "title", text.getText(), "bookid"), checkin.isSelected()?"CHECK IN":"CHECK OUT");
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        tm.setRowCount(0);
        Object[] colnames = {"Operation No","Client Name","Book Name","Borrowed/Return date","Operation category","Status"};
        tm.setColumnIdentifiers(colnames);
        for(Operations c:operations){
            String obj[] ={c.getOpId(),cdao.getClientName(c.getClient().getRegid()),bdao.getBookName(c.getBook().getBookid()),new SimpleDateFormat("dd-MM-yyyy").format(c.getDatetime()),c.getOperationCategory(),c.getStatus()};  
            if("All".equals(paneres) || paneres==null){
                tm.addRow(obj);
            }
            else if(paneres.equals(c.getStatus())){
                tm.addRow(obj);
            }
        }
        table.setModel(tm);
    }
    public void reportByDate(Date date1,Date date2){
        OperationsDao ckdao =  new OperationsDao();
         ClientDao cdao = new ClientDao();
        BookDao bdao = new BookDao();
        List<Operations> operations = ckdao.getReportOfDataDate(date1,date2, checkin.isSelected()?"CHECK IN":"CHECK OUT");
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        tm.setRowCount(0);
        Object[] colnames = {"Operation No","Client Name","Book Name","Borrowed/Return date","Operation category","Status"};
        tm.setColumnIdentifiers(colnames);
        for(Operations c:operations){
            String obj[] ={c.getOpId(),cdao.getClientName(c.getClient().getRegid()).toString(),bdao.getBookName(c.getBook().getBookid()),new SimpleDateFormat("dd-MM-yyyy").format(c.getDatetime()),c.getOperationCategory(),c.getStatus()};  
            if("All".equals(paneres) || paneres==null){
                tm.addRow(obj);
            }
            else if(paneres.equals(c.getStatus())){
                tm.addRow(obj);
            }
        }
        table.setModel(tm);
    }
    public String pane(){
        final JPanel pa =  new JPanel();
        final JRadioButton r1 = new JRadioButton("Have");
        final JRadioButton r2 = new JRadioButton("Returned");
        final JRadioButton r3 = new JRadioButton("All");
        ButtonGroup g1 = new ButtonGroup();
        g1.add(r3);
        g1.add(r2);
        g1.add(r1);
        pa.add(r1);
        pa.add(r2);
        pa.add(r3);
        JOptionPane.showMessageDialog(cmb, pa);
        return r1.isSelected()?"Have":r2.isSelected()?"Returned":r3.isSelected()?"All":null;
    }
    public void addData(){
        CategoryDao bcdao = new CategoryDao();
        List<String> catnames  = bcdao.CategoryNames();
        cmb.removeAllItems();
        for(String b:catnames){
            cmb.addItem(b);
        }
    }
}
